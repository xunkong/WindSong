# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PublishFolder: WindSong-CI

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet publish ./WindSong/WindSong.csproj -c Release -r win10-x64 -o ${{env.PublishFolder}} -p:Platform=x64 -p:PublishTrimmed=true -p:TrimMode=partial -p:SelfContained=true -p:PublishSingleFile=true -p:PublishReadyToRun=false -p:IncludeNativeLibrariesForSelfExtract=true -p:EnableCompressionInSingleFile=true

    - name: Install WindowsAppRuntime
      run: |
        $config = Get-Content -Raw config.json | ConvertFrom-Json;
        Invoke-WebRequest -Uri $config.WindowsAppRuntime -OutFile install.exe;
        ./install.exe

    - name: Add Readme File
      run: |
        $path = "${{env.PublishFolder}}/!README.txt"
        Add-Content -Path $path -Value 'Wind Song is a software to play Lyre automatically in Genshin Impact.';
        Add-Content -Path $path -Value 'Download WinAppRuntime from the following link and install it, then run "WindSong.exe".';
        Add-Content -Path $path -Value (ConvertFrom-Json (Get-Content -Raw config.json)).WindowsAppRuntime;
        Add-Content -Path $path -Value "--------------------";
        Add-Content -Path $path -Value "Build: $(Get-Date -AsUTC -Format "yyyy-MM-dd HH:mm:ss UTC")";
        Add-Content -Path $path -Value "Commit: ${{github.sha}}";
        Move-Item -Path update.ps1 -Destination "${{env.PublishFolder}}/update.ps1" -Force;

    - name: Test
      run: |
        Get-ChildItem -Path ${{env.PublishFolder}};
        Write-Host ----------;
        Start-Process -FilePath ./${{env.PublishFolder}}/WindSong.exe;
        $p = Get-Process -Name WindSong;
        Start-Sleep -Seconds 3;
        Write-Host "Main window handle: $($p.MainWindowHandle)";
        if ($p.MainWindowHandle -gt 0) {
            Write-Host "Start successfully!" -ForegroundColor Green;
            $null = $p.CloseMainWindow();
        } else {
            Write-Error "Start failed!";
            exit -1;
        }
        Start-Sleep -Seconds 3;
        Remove-Item -Path ./${{env.PublishFolder}}/log -Force -Recurse;

    - name: Config Ossutil
      if: github.event_name == 'push'
      run: |
        Invoke-WebRequest https://gosspublic.alicdn.com/ossutil/1.7.14/ossutil64.zip -OutFile ${{runner.temp}}/ossutil64.zip
        Expand-Archive -Path ${{runner.temp}}/ossutil64.zip -DestinationPath ${{runner.temp}}
        Move-Item -Path ${{runner.temp}}/ossutil64/ossutil64.exe -Destination C:/Windows/System32/ossutil.exe -Force
        ossutil config -e ${{secrets.OSS_ENDPOINT}} -i ${{secrets.ACCESS_KEY_ID}} -k ${{secrets.ACCESS_KEY_SECRET}}

    - name: Upload to Oss
      if: github.event_name == 'push'
      run: |
        Compress-Archive -Path ${{env.PublishFolder}} -DestinationPath ${{env.PublishFolder}}.zip
        ossutil cp ${{env.PublishFolder}}.zip oss://scighost-xunkong/download/windsong/ -f
